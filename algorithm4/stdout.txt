Checking test execution result...
[!] Test execution result: FAILED
Checking source code format...
  Preparing source code for format check...
  Running format check...
// =====================================================
//  Running cargo fmt...
// =====================================================
Diff in /home/runner/work/rustlings-zaychyk/rustlings-zaychyk/format_check/src/lib.rs:1:
 /*
-	binary_search tree
-	This problem requires you to implement a basic interface for a binary tree
+    binary_search tree
+    This problem requires you to implement a basic interface for a binary tree
 */
 
 //I AM NOT DONE
Diff in /home/runner/work/rustlings-zaychyk/rustlings-zaychyk/format_check/src/lib.rs:7:
 use std::cmp::Ordering;
 use std::fmt::Debug;
 
-
 #[derive(Debug)]
 struct TreeNode<T>
 where
Diff in /home/runner/work/rustlings-zaychyk/rustlings-zaychyk/format_check/src/lib.rs:43:
 where
     T: Ord,
 {
-
     fn new() -> Self {
         BinarySearchTree { root: None }
     }
Diff in /home/runner/work/rustlings-zaychyk/rustlings-zaychyk/format_check/src/lib.rs:70:
     }
 }
 
-
 #[cfg(test)]
 mod tests {
     use super::*;
Diff in /home/runner/work/rustlings-zaychyk/rustlings-zaychyk/format_check/src/lib.rs:79:
     fn test_insert_and_search() {
         let mut bst = BinarySearchTree::new();
 
-        
         assert_eq!(bst.search(1), false);
 
-        
         bst.insert(5);
         bst.insert(3);
         bst.insert(7);
Diff in /home/runner/work/rustlings-zaychyk/rustlings-zaychyk/format_check/src/lib.rs:89:
         bst.insert(2);
         bst.insert(4);
 
-        
         assert_eq!(bst.search(5), true);
         assert_eq!(bst.search(3), true);
         assert_eq!(bst.search(7), true);
Diff in /home/runner/work/rustlings-zaychyk/rustlings-zaychyk/format_check/src/lib.rs:96:
         assert_eq!(bst.search(2), true);
         assert_eq!(bst.search(4), true);
 
-        
         assert_eq!(bst.search(1), false);
         assert_eq!(bst.search(6), false);
     }
Diff in /home/runner/work/rustlings-zaychyk/rustlings-zaychyk/format_check/src/lib.rs:105:
     fn test_insert_duplicate() {
         let mut bst = BinarySearchTree::new();
 
-        
         bst.insert(1);
         bst.insert(1);
 
Diff in /home/runner/work/rustlings-zaychyk/rustlings-zaychyk/format_check/src/lib.rs:112:
-        
         assert_eq!(bst.search(1), true);
 
-        
         match bst.root {
             Some(ref node) => {
                 assert!(node.left.is_none());
Diff in /home/runner/work/rustlings-zaychyk/rustlings-zaychyk/format_check/src/lib.rs:119:
                 assert!(node.right.is_none());
-            },
+            }
             None => panic!("Root should not be None after insertion"),
         }
     }
Diff in /home/runner/work/rustlings-zaychyk/rustlings-zaychyk/format_check/src/lib.rs:124:
-}    
-
-
+}
 


// =====================================================
//    Running cargo clippy...
// =====================================================

[!] Source code format check: FAILED
